/*=========================================================================

  Program:   Visualization Toolkit
  Module:    SpecularSpheres.cxx

  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
  All rights reserved.
  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.

     This software is distributed WITHOUT ANY WARRANTY; without even
     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
     PURPOSE.  See the above copyright notice for more information.

=========================================================================*/
//
// This examples demonstrates the effect of specular lighting.
//

#include "./TriangleList.h"
#include "./tricase.cxx"

#include "vtkSmartPointer.h"
#include "vtkSphereSource.h"
#include "vtkPolyDataMapper.h"
#include "vtkActor.h"
#include "vtkInteractorStyle.h"
#include "vtkObjectFactory.h"
#include "vtkRenderer.h"
#include "vtkRenderWindow.h"
#include "vtkRenderWindowInteractor.h"
#include "vtkProperty.h"
#include "vtkCamera.h"
#include "vtkLight.h"
#include "vtkOpenGLPolyDataMapper.h"
#include "vtkJPEGReader.h"
#include "vtkImageData.h"
#include <vtkPNGWriter.h>

#include <vtkPolyData.h>
#include <vtkPointData.h>
#include <vtkPolyDataReader.h>
#include <vtkPoints.h>
#include <vtkUnsignedCharArray.h>
#include <vtkFloatArray.h>
#include <vtkDoubleArray.h>
#include <vtkCellArray.h>
#include <vtkDataSetReader.h>
#include <vtkContourFilter.h>
#include <vtkRectilinearGrid.h>

#include <vtkCamera.h>
#include <vtkDataSetMapper.h>
#include <vtkRenderer.h>
#include <vtkActor.h>
#include <vtkRenderWindow.h>
#include <vtkRenderWindowInteractor.h>
#include <vtkSmartPointer.h>





// ****************************************************************************
//  Function: GetNumberOfPoints
//
//  Arguments:
//     dims: an array of size 3 with the number of points in X, Y, and Z.
//           2D data sets would have Z=1
//
//  Returns:  the number of points in a rectilinear mesh
//
// ****************************************************************************

int GetNumberOfPoints(const int *dims)
{
    // 3D
    //return dims[0]*dims[1]*dims[2];
    // 2D
    return dims[0]*dims[1];
}

// ****************************************************************************
//  Function: GetNumberOfCells
//
//  Arguments:
//
//      dims: an array of size 3 with the number of points in X, Y, and Z.
//            2D data sets would have Z=1
//
//  Returns:  the number of cells in a rectilinear mesh
//
// ****************************************************************************

int GetNumberOfCells(const int *dims)
{
    // 3D
    //return (dims[0]-1)*(dims[1]-1)*(dims[2]-1);
    // 2D
    return (dims[0]-1)*(dims[1]-1);
}


// ****************************************************************************
//  Function: GetPointIndex
//
//  Arguments:
//      idx:  the logical index of a point.
//              0 <= idx[0] < dims[0]
//              1 <= idx[1] < dims[1]
//              2 <= idx[2] < dims[2] (or always 0 if 2D)
//      dims: an array of size 3 with the number of points in X, Y, and Z.
//            2D data sets would have Z=1
//
//  Returns:  the point index
//
// ****************************************************************************

int GetPointIndex(const int *idx, const int *dims)
{
    // 3D
    //return idx[2]*dims[0]*dims[1]+idx[1]*dims[0]+idx[0];
    // 2D
    return idx[1]*dims[0]+idx[0];
}


// ****************************************************************************
//  Function: GetCellIndex
//
//  Arguments:
//      idx:  the logical index of a cell.
//              0 <= idx[0] < dims[0]-1
//              1 <= idx[1] < dims[1]-1 
//              2 <= idx[2] < dims[2]-1 (or always 0 if 2D)
//      dims: an array of size 3 with the number of points in X, Y, and Z.
//            2D data sets would have Z=1
//
//  Returns:  the cell index
//
// ****************************************************************************

int GetCellIndex(const int *idx, const int *dims)
{
    // 3D
    //return idx[2]*(dims[0]-1)*(dims[1]-1)+idx[1]*(dims[0]-1)+idx[0];
    // 2D
    return idx[1]*(dims[0]-1)+idx[0];
}

// ****************************************************************************
//  Function: GetLogicalPointIndex
//
//  Arguments:
//      idx (output):  the logical index of the point.
//              0 <= idx[0] < dims[0]
//              1 <= idx[1] < dims[1] 
//              2 <= idx[2] < dims[2] (or always 0 if 2D)
//      pointId:  a number between 0 and (GetNumberOfPoints(dims)-1).
//      dims: an array of size 3 with the number of points in X, Y, and Z.
//            2D data sets would have Z=1
//
//  Returns:  None (argument idx is output)
//
// ****************************************************************************

void GetLogicalPointIndex(int *idx, int pointId, const int *dims)
{
    // 3D
    // idx[0] = pointId%dim[0];
    // idx[1] = (pointId/dims[0])%dims[1];
    // idx[2] = pointId/(dims[0]*dims[1]);

    // 2D
    idx[0] = pointId%dims[0];
    idx[1] = pointId/dims[0];
}


// ****************************************************************************
//  Function: GetLogicalCellIndex
//
//  Arguments:
//      idx (output):  the logical index of the cell index.
//              0 <= idx[0] < dims[0]-1
//              1 <= idx[1] < dims[1]-1 
//              2 <= idx[2] < dims[2]-1 (or always 0 if 2D)
//      cellId:  a number between 0 and (GetNumberOfCells(dims)-1).
//      dims: an array of size 3 with the number of points in X, Y, and Z.
//            2D data sets would have Z=1
//
//  Returns:  None (argument idx is output)
//
// ****************************************************************************

void GetLogicalCellIndex(int *idx, int cellId, const int *dims)
{
    // 3D
    // idx[0] = cellId%(dims[0]-1);
    // idx[1] = (cellId/(dims[0]-1))%(dims[1]-1);
    // idx[2] = cellId/((dims[0]-1)*(dims[1]-1));

    // 2D
    idx[0] = cellId%(dims[0]-1);
    idx[1] = cellId/(dims[0]-1);
}


class SegmentList
{
   public:
                   SegmentList() { maxSegments = 10000; segmentIdx = 0; pts = new float[4*maxSegments]; };
     virtual      ~SegmentList() { delete [] pts; };

     void          AddSegment(float X1, float Y1, float X2, float Y2);
     vtkPolyData  *MakePolyData(void);

   protected:
     float        *pts;
     int           maxSegments;
     int           segmentIdx;
};

void
SegmentList::AddSegment(float X1, float Y1, float X2, float Y2)
{
    pts[4*segmentIdx+0] = X1;
    pts[4*segmentIdx+1] = Y1;
    pts[4*segmentIdx+2] = X2;
    pts[4*segmentIdx+3] = Y2;
    segmentIdx++;
}

vtkPolyData *
SegmentList::MakePolyData(void)
{
    int nsegments = segmentIdx;
    int numPoints = 2*(nsegments);
    vtkPoints *vtk_pts = vtkPoints::New();
    vtk_pts->SetNumberOfPoints(numPoints);
    int ptIdx = 0;
    vtkCellArray *lines = vtkCellArray::New();
    lines->EstimateSize(numPoints,2);
    for (int i = 0 ; i < nsegments ; i++)
    {
        double pt[3];
        pt[0] = pts[4*i];
        pt[1] = pts[4*i+1];
        pt[2] = 0.;
        vtk_pts->SetPoint(ptIdx, pt);
        pt[0] = pts[4*i+2];
        pt[1] = pts[4*i+3];
        pt[2] = 0.;
        vtk_pts->SetPoint(ptIdx+1, pt);
        vtkIdType ids[2] = { ptIdx, ptIdx+1 };
        lines->InsertNextCell(2, ids);
        ptIdx += 2;
    }

    vtkPolyData *pd = vtkPolyData::New();
    pd->SetPoints(vtk_pts);
    pd->SetLines(lines);
    lines->Delete();
    vtk_pts->Delete();

    return pd;
}

int main()
{
    int  i, j;

    cerr<<"Testing tricase"<<triCase[0][1]<<endl;

    vtkDataSetReader *rdr = vtkDataSetReader::New();
    rdr->SetFileName("proj6B.vtk");
    rdr->Update();

    int dims[3];
    vtkRectilinearGrid *rgrid = (vtkRectilinearGrid *) rdr->GetOutput();
    rgrid->GetDimensions(dims);

    float *X = (float *) rgrid->GetXCoordinates()->GetVoidPointer(0);
    float *Y = (float *) rgrid->GetYCoordinates()->GetVoidPointer(0);
    float *F = (float *) rgrid->GetPointData()->GetScalars()->GetVoidPointer(0);

	// create sl and initialized numSegments for each case

    SegmentList sl;

   //
    sl.AddSegment(-10, -10, 10, -10);
    sl.AddSegment(-10, 10, 10, 10);
    sl.AddSegment(-10, -10, -10, 10);
    sl.AddSegment(10, -10, 10, 10);
    

    int numSegments[16];
    numSegments[0] = 0;
    numSegments[1] = 1;
    numSegments[2] = 1;
    numSegments[3] = 1;
    numSegments[4] = 1;
    numSegments[5] = 1;
    numSegments[6] = 2;
    numSegments[7] = 1;
    numSegments[8] = 1;
    numSegments[9] = 2;
    numSegments[10] = 1;
    numSegments[11] = 1;
    numSegments[12] = 1;
    numSegments[13] = 1;
    numSegments[14] = 1;
    numSegments[15] = 0;

    //initialize lookup table lup
    //the values will be equal to the second lup value or -1
    int lup[16][4]; 
    
    lup[0][0] = lup[0][1] = lup[0][2] = lup[0][3] = -1;
    lup[1][0] = 0;lup[1][1] = 3;lup[1][2] = lup[1][3] = -1;
    lup[2][0] = 0;lup[2][1] = 1;lup[2][2] = lup[2][3] = -1;
    lup[3][0] = 1;lup[3][1] = 3;lup[3][2] = lup[3][3] = -1;
    lup[4][0] = 2; lup[4][1] = 3; lup[4][2] = lup[4][3] = -1;
    lup[5][0] = 0; lup[5][1] = 2; lup[5][2] = lup[5][3] = -1;
    lup[6][0] = 0; lup[6][1] = 1; lup[6][2] = 2; lup[6][3] = 3;
    lup[7][0] = 1;  lup[7][1] = 2; lup[7][2] = lup[7][3] = -1;
    lup[8][0] =  1; lup[8][1] = 2; lup[8][2] = lup[8][3] = -1;
    lup[9][0] = 0;  lup[9][1] = 3; lup[9][2] = 1;lup[9][3] = 2;
    lup[10][0] = 0; lup[10][1] = 2; lup[10][2] = lup[10][3] = -1;
    lup[11][0] = 2; lup[11][1] = 3; lup[11][2] = lup[11][3] = -1;
    lup[12][0] = 1; lup[12][1] = 3; lup[12][2] = lup[12][3] = -1;
    lup[13][0] = 1; lup[13][1] = 0; lup[13][2] = lup[13][3] = -1;
    lup[14][0] = 0; lup[14][1] = 3; lup[14][2] = lup[14][3] = -1;
    lup[15][0] = lup[15][1] = lup[15][2] = lup[15][3] = -1;

    //need binary representation of these 0 or 1
    int bll,blr,bul,bur;

    float iso = 3.2;
    int num_cells = (dims[0]-1)*(dims[1]-1);
    
    //now I need to add all lines with the isovalue 3.2
    //first taking each cell from 0->dims[0]-1*dims[1]-1

	int n;
	for (int i=0;i<num_cells;i++){
		
	int cell_idx[2];
	//Get logical cell index for each cell
	GetLogicalCellIndex(cell_idx ,i, dims);

	//now get each corner starting w lower left

	int ll_logical[2] = {cell_idx[0], cell_idx[1]};
	int ll = GetPointIndex(ll_logical, dims);

	int lr_logical[2] = {cell_idx[0]+1, cell_idx[1]};
	int lr = GetPointIndex(lr_logical, dims);

	int ul_logical[2] = {cell_idx[0],cell_idx[1]+1};
	int ul = GetPointIndex(ul_logical, dims);
	
	int ur_logical[2] = {cell_idx[0]+1, cell_idx[1]+1};
	int ur = GetPointIndex(ur_logical, dims);

	//get value for ABCD

	float A = F[ll];
	float B = F[lr];
	float C = F[ul];
	float D = F[ur];

	//identify the cases 1-16 using binary.
	//ll =A

	if (A<iso)
		bll = 0;
	else{bll=1;}

	//lr = B

	if (B<iso)
		blr = 0;
	else{blr = 1;}

	//ul = C
	if (C < iso)
		bul = 0;
	else{bul=1;}

	//ur = D

	if (D < iso)	
		bur =0;
	else{bur =1;}
	
	//using the binary number to convert to a case number
	
	int icase = (1*bll)+(2*blr)+(4*bul)+(8*bur);	
	
	cerr<<icase<< "+"<<ll << " "<< lr<< " "<< ul<<" "<< ur <<endl;
	cerr<<F[ll]<<" "<<F[lr]<<" "<<F[ul]<< " "<<F[ur]<<" "<<endl;
	cerr<<bll<<" "<<blr<<" "<<bul<< " "<<bur<<" "<<endl;
	cerr<<A<<" "<<B<<" "<<C<< " "<<D<<" "<<endl;	

	int nsegs = numSegments[icase];
	//now for each cell specfic case
	for (int k = 0;k<nsegs;k++)
	{
		//first interpolated point on edge 1
		
		float p1[2], p2[2];	
		float t;
		float x;

  		int edge1 = lup[icase][2*k];

		cerr<<edge1<<"e1"<<endl;
		//lerping from v ll to v lr
		if (edge1==0){
			t = (iso-A)/(B-A);
			x = (X[ll_logical[0]]+t*(X[lr_logical[0]]-X[ll_logical[0]]));
			p1[0]= x;
			p1[1]= Y[ll_logical[1]];

			}

		//lerping from v lr to v ur
		if (edge1==1){
			t = (iso-B)/(D-B);
			x = (Y[lr_logical[1]]+t*(Y[ur_logical[1]]-Y[lr_logical[1]]));
			p1[0] = X[lr_logical[0]];
			p1[1] = x;

		}
		//lerping from v ul to v ur
		if (edge1==2){
			t = (iso-C)/(D-C);
			x = (X[ul_logical[0]]+t*(X[ur_logical[0]]-X[ul_logical[0]]));
			p1[0] = x;
			p1[1] = Y[ul_logical[1]];
			}
		//lerping from v ll to v ul
		if (edge1==3){
			t = (iso-A)/(C-A);
			x = (Y[ll_logical[1]]+t*(Y[ul_logical[1]]-Y[ll_logical[1]]));
			p1[0] = X[ll_logical[0]];
			p1[1] = x;
			}
//		float p1[2] = {x,0};//interp edge1 X0 
		
		//next edge

		int edge2 = lup[icase][2*k+1];
	
		cerr<<edge2<<"e2"<<" \n" <<endl;
		if (edge2==0){
			t = (iso-A)/(B-A);
			x = (X[ll_logical[0]]+t*(X[lr_logical[0]]-X[ll_logical[0]]));
			p2[0]= x;
			p2[1]= Y[ll_logical[1]];
			}
		if (edge2==1){
			t = (iso-B)/(D-B);
			x = (Y[lr_logical[1]]+t*(Y[ur_logical[1]]-Y[lr_logical[1]]));
			p2[0] = X[lr_logical[0]];
			p2[1] = x;
			}
		if (edge2==2){
			t = (iso-C)/(D-C);
			x = (X[ul_logical[0]]+t*(X[ur_logical[0]]-X[ul_logical[0]]));
			p2[0] = x;
			p2[1] = Y[ul_logical[1]];
			}
		if (edge2==3){
			t = (iso-A)/(C-A);
			x = (Y[ll_logical[1]]+t*(Y[ul_logical[1]]-Y[ll_logical[1]]));
			p2[0] = X[ll_logical[0]];
			p2[1] = x;
			}		

		sl.AddSegment(p1[0], p1[1] ,p2[0], p2[1]);

	}//endfor2


	}//endfor1

    cerr<<i<<endl;
    vtkPolyData *pd = sl.MakePolyData();

    //This can be useful for debugging
/*
    vtkDataSetWriter *writer = vtkDataSetWriter::New();
    writer->SetFileName("paths.vtk");
    writer->SetInputData(pd);
    writer->Write();
 */

    vtkSmartPointer<vtkDataSetMapper> win1Mapper =
      vtkSmartPointer<vtkDataSetMapper>::New();
    win1Mapper->SetInputData(pd);
    win1Mapper->SetScalarRange(0, 0.15);

    vtkSmartPointer<vtkActor> win1Actor =
      vtkSmartPointer<vtkActor>::New();
    win1Actor->SetMapper(win1Mapper);

    vtkSmartPointer<vtkRenderer> ren1 =
      vtkSmartPointer<vtkRenderer>::New();

    vtkSmartPointer<vtkRenderWindow> renWin =
      vtkSmartPointer<vtkRenderWindow>::New();
    renWin->AddRenderer(ren1);

    vtkSmartPointer<vtkRenderWindowInteractor> iren =
      vtkSmartPointer<vtkRenderWindowInteractor>::New();
    iren->SetRenderWindow(renWin);
    ren1->AddActor(win1Actor);
    ren1->SetBackground(0.0, 0.0, 0.0);
    renWin->SetSize(800, 800);

    ren1->GetActiveCamera()->SetFocalPoint(0,0,0);
    ren1->GetActiveCamera()->SetPosition(0,0,50);
    ren1->GetActiveCamera()->SetViewUp(0,1,0);
    ren1->GetActiveCamera()->SetClippingRange(20, 120);
    ren1->GetActiveCamera()->SetDistance(30);

    // This starts the event loop and invokes an initial render.
    //
    iren->Initialize();
    iren->Start();

    pd->Delete();
}
